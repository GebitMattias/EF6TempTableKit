using System.Collections;
using System.Collections.Generic;
using System.Data.Common;
using System.Data.Entity.Infrastructure.Interception;
using System.Linq;

namespace EF6TempTableKit.DbContext
{
    public sealed class EF6TempTableKitQueryInterceptor : DbCommandInterceptor
    {
        public override void ReaderExecuting(DbCommand command, DbCommandInterceptionContext<DbDataReader> interceptionContext)
        {
            PrependTempTableSql(command, interceptionContext);
        }

        private void PrependTempTableSql<T>(DbCommand command, DbCommandInterceptionContext<T> interceptionContext)
        {
            var dbContextWithTempTable = FindDbContextWithTempTable(interceptionContext.DbContexts);
            if (dbContextWithTempTable != null && ((IDbContextWithTempTable) dbContextWithTempTable)?.TempTableContainer?.TempSqlQueriesList?.Count > 0)
            {
                var interceptedComandText = command.CommandText;
                var selectCommandText = "";
                var assemblyVersion = typeof(EF6TempTableKitQueryInterceptor).Assembly.GetName().Version;
                var generatedByEf6TempTableKitStartMsg = $"/* Generated by EF6TempTableKit {assemblyVersion} - START */";
                var generatedByEf6TempTableKitEndMsg = $"/* Generated by EF6TempTableKit {assemblyVersion} - END*/";

                var contextWithTempTable = (IDbContextWithTempTable)dbContextWithTempTable;

                var alreadyAttachedTempTableQuery = new HashSet<string>();

                var tempSqlQueriesEnumerator = contextWithTempTable.TempTableContainer.TempSqlQueriesList.Cast<DictionaryEntry>().Reverse().GetEnumerator();
                while (tempSqlQueriesEnumerator.MoveNext())
                {
                    var tempTableName = (string)tempSqlQueriesEnumerator.Current.Key;
                    var tempSqlQuery = (Query)tempSqlQueriesEnumerator.Current.Value;

                    if (tempSqlQuery.ReuseExisting)
                    {
                        dbContextWithTempTable.Database.ExecuteSqlCommand(
                                generatedByEf6TempTableKitStartMsg
                                + "\n"
                                + tempSqlQuery.QueryString
                                + "\n"
                                + generatedByEf6TempTableKitEndMsg
                            );
                    }
                    else
                    {
                        if (!alreadyAttachedTempTableQuery.Any(t => t == tempTableName) && interceptedComandText.Contains(tempTableName))
                        {
                            selectCommandText = 
                                "\n" 
                                + generatedByEf6TempTableKitStartMsg
                                + "\n"
                                + tempSqlQuery.QueryString
                                + "\n" 
                                + generatedByEf6TempTableKitEndMsg
                                + "\n"
                                + selectCommandText;

                            var hasTempTableDependencies = contextWithTempTable?.TempTableContainer?.TempOnTempDependencies.ContainsKey(tempTableName);
                            if (hasTempTableDependencies.Value)
                            {
                                foreach (var tempTable in contextWithTempTable?.TempTableContainer?.TempOnTempDependencies[tempTableName])
                                {
                                    var query = (Query)contextWithTempTable.TempTableContainer.TempSqlQueriesList[tempTable.Name];
                                    selectCommandText = "\n"
                                        + generatedByEf6TempTableKitStartMsg
                                        + "\n"
                                        + query.QueryString
                                        + "\n"
                                        + generatedByEf6TempTableKitEndMsg
                                        + "\n"
                                        + selectCommandText;
                                    alreadyAttachedTempTableQuery.Add(tempTable.Name);
                                }
                            }
                        }
                    }
                }
                command.CommandText = selectCommandText + interceptedComandText;
            }
        }

        private System.Data.Entity.DbContext FindDbContextWithTempTable(IEnumerable<System.Data.Entity.DbContext> dbContexts)
        {
            foreach (var context in dbContexts)
            {
                if (context is IDbContextWithTempTable)
                {
                    return context;
                }
            }
            return null;
        }
    }
}